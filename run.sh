#!/bin/bash

# ƒê·ªãnh nghƒ©a c√°c bi·∫øn
IMAGE_NAME="erp-api"           # T√™n c·ªßa Docker image
TAG="latest"                  # Tag c·ªßa image
CONTAINER_NAME="erp-api"  # T√™n c·ªßa container
PORT="3800:80"              # Port mapping (host:container)
HOST_PORT=$(echo ${PORT} | cut -d':' -f1)  # L·∫•y port host
CONTAINER_PORT=$(echo ${PORT} | cut -d':' -f2)  # L·∫•y port container
RANDOM_PORT=$((1024 + RANDOM % 64511)) # T·∫°o port ng·∫´u nhi√™n trong ph·∫°m vi h·ª£p l·ªá (1024-65535)
TEMP_PORT="${RANDOM_PORT}:${CONTAINER_PORT}"  # Port t·∫°m th·ªùi ng·∫´u nhi√™n
DOCKERFILE_PATH="./Dockerfile"           # ƒê∆∞·ªùng d·∫´n t·ªõi Dockerfile
NETWORK_NAME="apps"           # T√™n network
HEALTH_CHECK_TIMEOUT=30       # Th·ªùi gian ch·ªù health check (gi√¢y)

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# H√†m ki·ªÉm tra l·ªói
check_error() {
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå L·ªói: $1${NC}"
        exit 1
    fi
}

# H√†m ki·ªÉm tra health check
check_health() {
    local container_name=$1
    local start_time=$(date +%s)
    local end_time=$((start_time + HEALTH_CHECK_TIMEOUT))
    
    echo -e "${YELLOW}üîç ƒêang ki·ªÉm tra container ${container_name}...${NC}"
    
    while [ $(date +%s) -lt $end_time ]; do
        if docker ps -q -f name=${container_name} | grep -q .; then
            echo -e "${GREEN}‚úÖ Container ${container_name} ƒëang ch·∫°y${NC}"
            return 0
        fi
        sleep 2
    done
    
    echo -e "${RED}‚ùå Container ${container_name} kh√¥ng ch·∫°y${NC}"
    return 1
}

# Ki·ªÉm tra Docker c√≥ ƒë∆∞·ª£c c√†i ƒë·∫∑t kh√¥ng
if ! command -v docker &> /dev/null; then
    echo -e "${RED}üö´ Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t Docker tr∆∞·ªõc!${NC}"
    exit 1
fi

echo -e "${YELLOW}üöÄ === B·∫Øt ƒë·∫ßu build v√† ch·∫°y Docker container ===${NC}"

# Ki·ªÉm tra xem Dockerfile c√≥ t·ªìn t·∫°i kh√¥ng
if [ ! -f "${DOCKERFILE_PATH}" ]; then
    echo -e "${RED}üìÇ Kh√¥ng t√¨m th·∫•y Dockerfile t·∫°i ${DOCKERFILE_PATH}${NC}"
    exit 1
fi

# Ki·ªÉm tra v√† t·∫°o network n·∫øu ch∆∞a t·ªìn t·∫°i
if ! docker network ls | grep -q "${NETWORK_NAME}"; then
    echo -e "${GREEN}üåê T·∫°o network: ${NETWORK_NAME}...${NC}"
    docker network create ${NETWORK_NAME}
    check_error "T·∫°o network th·∫•t b·∫°i"
else
    echo -e "${YELLOW}üåê Network ${NETWORK_NAME} ƒë√£ t·ªìn t·∫°i${NC}"
fi

# Ki·ªÉm tra xem image ƒë√£ t·ªìn t·∫°i ch∆∞a
if docker images -q ${IMAGE_NAME}:${TAG} &> /dev/null; then
    echo -e "${YELLOW}üñºÔ∏è Image ${IMAGE_NAME}:${TAG} ƒë√£ t·ªìn t·∫°i. ƒêang x√≥a ƒë·ªÉ build b·∫£n m·ªõi...${NC}"
    docker rmi ${IMAGE_NAME}:${TAG} 2>/dev/null || true
fi

# Build Docker image m·ªõi
echo -e "${GREEN}üî® ƒêang build Docker image: ${IMAGE_NAME}:${TAG}...${NC}"
docker build -t ${IMAGE_NAME}:${TAG} -f ${DOCKERFILE_PATH} .
check_error "Build image th·∫•t b·∫°i"

# Ki·ªÉm tra xem container c≈© c√≥ t·ªìn t·∫°i kh√¥ng
if [ "$(docker ps -a -q -f name=${CONTAINER_NAME})" ]; then
    echo -e "${YELLOW}üîÑ B·∫Øt ƒë·∫ßu quy tr√¨nh rolling update...${NC}"
    
    # Ch·∫°y container m·ªõi v·ªõi port t·∫°m th·ªùi
    echo -e "${GREEN}üö¢ ƒêang ch·∫°y container m·ªõi: ${CONTAINER_NAME}_new...${NC}"
    docker run -d --name ${CONTAINER_NAME}_new \
        --network ${NETWORK_NAME} \
        -p ${TEMP_PORT} \
        ${IMAGE_NAME}:${TAG}
    check_error "Ch·∫°y container m·ªõi th·∫•t b·∫°i"
    
    # Ki·ªÉm tra health check container m·ªõi
    if check_health "${CONTAINER_NAME}_new"; then
        echo -e "${GREEN}‚úÖ Container m·ªõi ho·∫°t ƒë·ªông t·ªët. ƒêang chuy·ªÉn ƒë·ªïi...${NC}"
        
        # D·ª´ng v√† x√≥a container c≈©
        echo -e "${YELLOW}üõë ƒêang d·ª´ng container c≈©: ${CONTAINER_NAME}...${NC}"
        docker stop ${CONTAINER_NAME} 2>/dev/null || true
        docker rm ${CONTAINER_NAME} 2>/dev/null || true
        
        # D·ª´ng container t·∫°m th·ªùi
        echo -e "${YELLOW}üõë ƒêang d·ª´ng container t·∫°m th·ªùi...${NC}"
        docker stop ${CONTAINER_NAME}_new 2>/dev/null || true
        docker rm ${CONTAINER_NAME}_new 2>/dev/null || true
        
        # Ch·∫°y container m·ªõi v·ªõi port ch√≠nh th·ª©c
        echo -e "${GREEN}üö¢ ƒêang ch·∫°y container m·ªõi v·ªõi port ch√≠nh th·ª©c...${NC}"
        docker run -d --name ${CONTAINER_NAME} \
            --network ${NETWORK_NAME} \
            --restart always \
            -p ${PORT} \
            ${IMAGE_NAME}:${TAG}
        check_error "Ch·∫°y container m·ªõi th·∫•t b·∫°i"
        
        echo -e "${GREEN}‚úÖ Rolling update th√†nh c√¥ng!${NC}"
    else
        echo -e "${RED}‚ùå Container m·ªõi kh√¥ng ho·∫°t ƒë·ªông t·ªët. ƒêang rollback...${NC}"
        docker stop ${CONTAINER_NAME}_new 2>/dev/null || true
        docker rm ${CONTAINER_NAME}_new 2>/dev/null || true
        exit 1
    fi
else
    # N·∫øu kh√¥ng c√≥ container c≈©, ch·∫°y container m·ªõi v·ªõi port mapping
    echo -e "${GREEN}üö¢ ƒêang ch·∫°y container m·ªõi: ${CONTAINER_NAME}...${NC}"
    docker run -d --name ${CONTAINER_NAME} \
        --network ${NETWORK_NAME} \
        --restart always \
        -p ${PORT} ${IMAGE_NAME}:${TAG}
    check_error "Ch·∫°y container th·∫•t b·∫°i"
fi

# Ki·ªÉm tra tr·∫°ng th√°i container
echo -e "${YELLOW}üîç Ki·ªÉm tra tr·∫°ng th√°i container...${NC}"
sleep 2
if [ "$(docker ps -q -f name=${CONTAINER_NAME})" ]; then
    echo -e "${GREEN}‚úÖ Container ${CONTAINER_NAME} ƒëang ch·∫°y v·ªõi phi√™n b·∫£n m·ªõi!${NC}"
    # L·∫•y port host th·ª±c t·∫ø t·ª´ chu·ªói PORT
    HOST_PORT=$(echo ${PORT} | cut -d':' -f1)
    echo -e "${GREEN}üåê Truy c·∫≠p ·ª©ng d·ª•ng t·∫°i: http://localhost:${HOST_PORT}${NC}"
else
    echo -e "${RED}‚ùó Container kh√¥ng ch·∫°y. Ki·ªÉm tra log ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt:${NC}"
    docker logs ${CONTAINER_NAME}
    exit 1
fi